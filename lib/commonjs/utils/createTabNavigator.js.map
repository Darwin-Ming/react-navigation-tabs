{"version":3,"names":["React","_interopRequireWildcard","require","_reactNavigation","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_extends","assign","bind","target","arguments","length","source","key","apply","_defineProperty","obj","value","_toPropertyKey","enumerable","configurable","writable","_toPrimitive","String","Symbol","toPrimitive","TypeError","Number","createTabNavigator","TabView","NavigationView","Component","constructor","args","route","screenProps","descriptors","props","descriptor","TabComponent","getComponent","createElement","SceneView","navigation","component","focused","tintColor","horizontal","options","tabBarIcon","tabBarLabel","title","routeName","tabBarAccessibilityLabel","label","_getLabelText","routes","state","indexOf","undefined","tabBarTestID","isFocused","index","dispatch","StackActions","popToTop","emit","_jumpTo","_isTabPress","Promise","resolve","then","defaultHandler","_makeDefaultHandler","tabBarOnPress","tabBarOnLongPress","SwitchActions","jumpTo","render","navigationConfig","getLabelText","getAccessibilityLabel","_getAccessibilityLabel","getTestID","_getTestID","renderIcon","_renderIcon","renderScene","_renderScene","onIndexChange","_handleIndexChange","onTabPress","_handleTabPress","onTabLongPress","_handleTabLongPress","config","router","TabRouter","createNavigator"],"sources":["createTabNavigator.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  TabRouter,\n  StackActions,\n  SceneView,\n  createNavigator,\n  SwitchActions,\n  NavigationRoute,\n  NavigationRouteConfigMap,\n  CreateNavigatorConfig,\n  NavigationTabRouterConfig,\n} from 'react-navigation';\nimport {\n  NavigationTabProp,\n  NavigationCommonTabOptions,\n  SceneDescriptorMap,\n} from '../types';\n\ntype RouteConfig<Options> = NavigationRouteConfigMap<\n  Options,\n  NavigationTabProp<NavigationRoute, any>\n>;\n\ntype CommonProps = {\n  navigation: NavigationTabProp;\n  descriptors: SceneDescriptorMap;\n  screenProps?: unknown;\n};\n\ntype ExtraProps<Config extends {}> = {\n  navigationConfig: Config;\n};\n\nexport type RenderIconProps = {\n  route: NavigationRoute;\n  focused: boolean;\n  tintColor?: string;\n  horizontal?: boolean;\n};\n\nexport type NavigationViewProps = {\n  getLabelText: (props: { route: NavigationRoute }) => string | undefined;\n  getAccessibilityLabel: (props: {\n    route: NavigationRoute;\n  }) => string | undefined;\n  getTestID: (props: { route: NavigationRoute }) => string | undefined;\n  renderIcon: (props: RenderIconProps) => React.ReactNode;\n  renderScene: (props: { route: NavigationRoute }) => React.ReactNode;\n  onIndexChange: (index: number) => void;\n  onTabPress: (props: { route: NavigationRoute }) => void;\n  onTabLongPress: (props: { route: NavigationRoute }) => void;\n};\n\nexport default function createTabNavigator<\n  Config extends {},\n  Options extends NavigationCommonTabOptions,\n  Props extends NavigationViewProps & CommonProps\n>(TabView: React.ComponentType<Props & Config & Options>) {\n  class NavigationView extends React.Component<\n    Exclude<Props, NavigationViewProps> & ExtraProps<Config>\n  > {\n    _renderScene = ({ route }: { route: { key: string } }) => {\n      const { screenProps, descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const TabComponent = descriptor.getComponent();\n      return (\n        <SceneView\n          screenProps={screenProps}\n          navigation={descriptor.navigation}\n          component={TabComponent}\n        />\n      );\n    };\n\n    _renderIcon = ({\n      route,\n      focused,\n      tintColor,\n      horizontal = false,\n    }: RenderIconProps) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function'\n          ? options.tabBarIcon({ focused, tintColor, horizontal })\n          : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _getLabelText = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _getAccessibilityLabel = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n        return options.tabBarAccessibilityLabel;\n      }\n\n      const label = this._getLabelText({ route });\n\n      if (typeof label === 'string') {\n        const { routes } = this.props.navigation.state;\n        return `${label}, tab, ${routes.indexOf(route) + 1} of ${\n          routes.length\n        }`;\n      }\n\n      return undefined;\n    };\n\n    _getTestID = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      return options.tabBarTestID;\n    };\n\n    _makeDefaultHandler = ({\n      route,\n      navigation,\n    }: {\n      route: NavigationRoute;\n      navigation: NavigationTabProp;\n    }) => () => {\n      if (navigation.isFocused()) {\n        if (route.hasOwnProperty('index') && route.index > 0) {\n          // If current tab has a nested navigator, pop to top\n          navigation.dispatch(StackActions.popToTop({ key: route.key }));\n        } else {\n          navigation.emit('refocus');\n        }\n      } else {\n        this._jumpTo(route.routeName);\n      }\n    };\n\n    _handleTabPress = ({ route }: { route: NavigationRoute }) => {\n      this._isTabPress = true;\n\n      // After tab press, handleIndexChange will be called synchronously\n      // So we reset it in promise callback\n      Promise.resolve().then(() => (this._isTabPress = false));\n\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnPress) {\n        options.tabBarOnPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleTabLongPress = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnLongPress) {\n        options.tabBarOnLongPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleIndexChange = (index: number) => {\n      if (this._isTabPress) {\n        this._isTabPress = false;\n        return;\n      }\n\n      this._jumpTo(this.props.navigation.state.routes[index].routeName);\n    };\n\n    _jumpTo = (routeName: string) => {\n      const { navigation } = this.props;\n\n      navigation.dispatch(\n        SwitchActions.jumpTo({\n          routeName,\n          key: navigation.state.key,\n        })\n      );\n    };\n\n    _isTabPress: boolean = false;\n\n    render() {\n      const {\n        descriptors,\n        navigation,\n        screenProps,\n        navigationConfig,\n      } = this.props;\n      const { state } = navigation;\n      const route = state.routes[state.index];\n      const descriptor = descriptors[route.key];\n\n      return (\n        // TODO: don't have time to fix it right now\n        // @ts-ignore\n        <TabView\n          {...navigationConfig}\n          {...descriptor.options}\n          getLabelText={this._getLabelText}\n          getAccessibilityLabel={this._getAccessibilityLabel}\n          getTestID={this._getTestID}\n          renderIcon={this._renderIcon}\n          renderScene={this._renderScene}\n          onIndexChange={this._handleIndexChange}\n          onTabPress={this._handleTabPress}\n          onTabLongPress={this._handleTabLongPress}\n          navigation={navigation}\n          descriptors={descriptors}\n          screenProps={screenProps}\n        />\n      );\n    }\n  }\n\n  return (\n    routes: RouteConfig<Options>,\n    config: CreateNavigatorConfig<\n      Partial<Config>,\n      NavigationTabRouterConfig,\n      Partial<Options>,\n      NavigationTabProp<NavigationRoute, any>\n    > = {}\n  ) => {\n    const router = TabRouter(routes, config as any);\n\n    return createNavigator(NavigationView as any, router, config as any);\n  };\n}\n"],"mappings":";;;;;;AAAA,IAAAA,KAAA,GAAAC,uBAAA,CAAAC,OAAA;AACA,IAAAC,gBAAA,GAAAD,OAAA;AAU0B,SAAAE,yBAAAC,CAAA,6BAAAC,OAAA,mBAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,CAAAC,CAAA,WAAAA,CAAA,GAAAG,CAAA,GAAAD,CAAA,KAAAF,CAAA;AAAA,SAAAJ,wBAAAI,CAAA,EAAAE,CAAA,SAAAA,CAAA,IAAAF,CAAA,IAAAA,CAAA,CAAAI,UAAA,SAAAJ,CAAA,eAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,WAAAK,OAAA,EAAAL,CAAA,QAAAG,CAAA,GAAAJ,wBAAA,CAAAG,CAAA,OAAAC,CAAA,IAAAA,CAAA,CAAAG,GAAA,CAAAN,CAAA,UAAAG,CAAA,CAAAI,GAAA,CAAAP,CAAA,OAAAQ,CAAA,KAAAC,SAAA,UAAAC,CAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,CAAA,IAAAd,CAAA,oBAAAc,CAAA,IAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAjB,CAAA,EAAAc,CAAA,SAAAI,CAAA,GAAAR,CAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAb,CAAA,EAAAc,CAAA,UAAAI,CAAA,KAAAA,CAAA,CAAAX,GAAA,IAAAW,CAAA,CAAAC,GAAA,IAAAR,MAAA,CAAAC,cAAA,CAAAJ,CAAA,EAAAM,CAAA,EAAAI,CAAA,IAAAV,CAAA,CAAAM,CAAA,IAAAd,CAAA,CAAAc,CAAA,YAAAN,CAAA,CAAAH,OAAA,GAAAL,CAAA,EAAAG,CAAA,IAAAA,CAAA,CAAAgB,GAAA,CAAAnB,CAAA,EAAAQ,CAAA,GAAAA,CAAA;AAAA,SAAAY,SAAA,IAAAA,QAAA,GAAAT,MAAA,CAAAU,MAAA,GAAAV,MAAA,CAAAU,MAAA,CAAAC,IAAA,eAAAC,MAAA,aAAAL,CAAA,MAAAA,CAAA,GAAAM,SAAA,CAAAC,MAAA,EAAAP,CAAA,UAAAQ,MAAA,GAAAF,SAAA,CAAAN,CAAA,YAAAS,GAAA,IAAAD,MAAA,QAAAf,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAS,MAAA,EAAAC,GAAA,KAAAJ,MAAA,CAAAI,GAAA,IAAAD,MAAA,CAAAC,GAAA,gBAAAJ,MAAA,YAAAH,QAAA,CAAAQ,KAAA,OAAAJ,SAAA;AAAA,SAAAK,gBAAAC,GAAA,EAAAH,GAAA,EAAAI,KAAA,IAAAJ,GAAA,GAAAK,cAAA,CAAAL,GAAA,OAAAA,GAAA,IAAAG,GAAA,IAAAnB,MAAA,CAAAC,cAAA,CAAAkB,GAAA,EAAAH,GAAA,IAAAI,KAAA,EAAAA,KAAA,EAAAE,UAAA,QAAAC,YAAA,QAAAC,QAAA,oBAAAL,GAAA,CAAAH,GAAA,IAAAI,KAAA,WAAAD,GAAA;AAAA,SAAAE,eAAA7B,CAAA,QAAAe,CAAA,GAAAkB,YAAA,CAAAjC,CAAA,uCAAAe,CAAA,GAAAA,CAAA,GAAAmB,MAAA,CAAAnB,CAAA;AAAA,SAAAkB,aAAAjC,CAAA,EAAAD,CAAA,2BAAAC,CAAA,KAAAA,CAAA,SAAAA,CAAA,MAAAH,CAAA,GAAAG,CAAA,CAAAmC,MAAA,CAAAC,WAAA,kBAAAvC,CAAA,QAAAkB,CAAA,GAAAlB,CAAA,CAAAiB,IAAA,CAAAd,CAAA,EAAAD,CAAA,uCAAAgB,CAAA,SAAAA,CAAA,YAAAsB,SAAA,yEAAAtC,CAAA,GAAAmC,MAAA,GAAAI,MAAA,EAAAtC,CAAA;AA0CX,SAASuC,kBAAkBA,CAIxCC,OAAsD,EAAE;EACxD,MAAMC,cAAc,SAASjD,KAAK,CAACkD,SAAS,CAE1C;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAlB,eAAA,uBACe,CAAC;QAAEmB;MAAkC,CAAC,KAAK;QACxD,MAAM;UAAEC,WAAW;UAAEC;QAAY,CAAC,GAAG,IAAI,CAACC,KAAK;QAC/C,MAAMC,UAAU,GAAGF,WAAW,CAACF,KAAK,CAACrB,GAAG,CAAC;QACzC,MAAM0B,YAAY,GAAGD,UAAU,CAACE,YAAY,CAAC,CAAC;QAC9C,oBACE3D,KAAA,CAAA4D,aAAA,CAACzD,gBAAA,CAAA0D,SAAS;UACRP,WAAW,EAAEA,WAAY;UACzBQ,UAAU,EAAEL,UAAU,CAACK,UAAW;UAClCC,SAAS,EAAEL;QAAa,CACzB,CAAC;MAEN,CAAC;MAAAxB,eAAA,sBAEa,CAAC;QACbmB,KAAK;QACLW,OAAO;QACPC,SAAS;QACTC,UAAU,GAAG;MACE,CAAC,KAAK;QACrB,MAAM;UAAEX;QAAY,CAAC,GAAG,IAAI,CAACC,KAAK;QAClC,MAAMC,UAAU,GAAGF,WAAW,CAACF,KAAK,CAACrB,GAAG,CAAC;QACzC,MAAMmC,OAAO,GAAGV,UAAU,CAACU,OAAO;QAElC,IAAIA,OAAO,CAACC,UAAU,EAAE;UACtB,OAAO,OAAOD,OAAO,CAACC,UAAU,KAAK,UAAU,GAC3CD,OAAO,CAACC,UAAU,CAAC;YAAEJ,OAAO;YAAEC,SAAS;YAAEC;UAAW,CAAC,CAAC,GACtDC,OAAO,CAACC,UAAU;QACxB;QAEA,OAAO,IAAI;MACb,CAAC;MAAAlC,eAAA,wBAEe,CAAC;QAAEmB;MAAkC,CAAC,KAAK;QACzD,MAAM;UAAEE;QAAY,CAAC,GAAG,IAAI,CAACC,KAAK;QAClC,MAAMC,UAAU,GAAGF,WAAW,CAACF,KAAK,CAACrB,GAAG,CAAC;QACzC,MAAMmC,OAAO,GAAGV,UAAU,CAACU,OAAO;QAElC,IAAIA,OAAO,CAACE,WAAW,EAAE;UACvB,OAAOF,OAAO,CAACE,WAAW;QAC5B;QAEA,IAAI,OAAOF,OAAO,CAACG,KAAK,KAAK,QAAQ,EAAE;UACrC,OAAOH,OAAO,CAACG,KAAK;QACtB;QAEA,OAAOjB,KAAK,CAACkB,SAAS;MACxB,CAAC;MAAArC,eAAA,iCAEwB,CAAC;QAAEmB;MAAkC,CAAC,KAAK;QAClE,MAAM;UAAEE;QAAY,CAAC,GAAG,IAAI,CAACC,KAAK;QAClC,MAAMC,UAAU,GAAGF,WAAW,CAACF,KAAK,CAACrB,GAAG,CAAC;QACzC,MAAMmC,OAAO,GAAGV,UAAU,CAACU,OAAO;QAElC,IAAI,OAAOA,OAAO,CAACK,wBAAwB,KAAK,WAAW,EAAE;UAC3D,OAAOL,OAAO,CAACK,wBAAwB;QACzC;QAEA,MAAMC,KAAK,GAAG,IAAI,CAACC,aAAa,CAAC;UAAErB;QAAM,CAAC,CAAC;QAE3C,IAAI,OAAOoB,KAAK,KAAK,QAAQ,EAAE;UAC7B,MAAM;YAAEE;UAAO,CAAC,GAAG,IAAI,CAACnB,KAAK,CAACM,UAAU,CAACc,KAAK;UAC9C,OAAQ,GAAEH,KAAM,UAASE,MAAM,CAACE,OAAO,CAACxB,KAAK,CAAC,GAAG,CAAE,OACjDsB,MAAM,CAAC7C,MACR,EAAC;QACJ;QAEA,OAAOgD,SAAS;MAClB,CAAC;MAAA5C,eAAA,qBAEY,CAAC;QAAEmB;MAAkC,CAAC,KAAK;QACtD,MAAM;UAAEE;QAAY,CAAC,GAAG,IAAI,CAACC,KAAK;QAClC,MAAMC,UAAU,GAAGF,WAAW,CAACF,KAAK,CAACrB,GAAG,CAAC;QACzC,MAAMmC,OAAO,GAAGV,UAAU,CAACU,OAAO;QAElC,OAAOA,OAAO,CAACY,YAAY;MAC7B,CAAC;MAAA7C,eAAA,8BAEqB,CAAC;QACrBmB,KAAK;QACLS;MAIF,CAAC,KAAK,MAAM;QACV,IAAIA,UAAU,CAACkB,SAAS,CAAC,CAAC,EAAE;UAC1B,IAAI3B,KAAK,CAAChC,cAAc,CAAC,OAAO,CAAC,IAAIgC,KAAK,CAAC4B,KAAK,GAAG,CAAC,EAAE;YACpD;YACAnB,UAAU,CAACoB,QAAQ,CAACC,6BAAY,CAACC,QAAQ,CAAC;cAAEpD,GAAG,EAAEqB,KAAK,CAACrB;YAAI,CAAC,CAAC,CAAC;UAChE,CAAC,MAAM;YACL8B,UAAU,CAACuB,IAAI,CAAC,SAAS,CAAC;UAC5B;QACF,CAAC,MAAM;UACL,IAAI,CAACC,OAAO,CAACjC,KAAK,CAACkB,SAAS,CAAC;QAC/B;MACF,CAAC;MAAArC,eAAA,0BAEiB,CAAC;QAAEmB;MAAkC,CAAC,KAAK;QAC3D,IAAI,CAACkC,WAAW,GAAG,IAAI;;QAEvB;QACA;QACAC,OAAO,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,MAAO,IAAI,CAACH,WAAW,GAAG,KAAM,CAAC;QAExD,MAAM;UAAEhC;QAAY,CAAC,GAAG,IAAI,CAACC,KAAK;QAClC,MAAMC,UAAU,GAAGF,WAAW,CAACF,KAAK,CAACrB,GAAG,CAAC;QACzC,MAAM;UAAE8B,UAAU;UAAEK;QAAQ,CAAC,GAAGV,UAAU;QAE1C,MAAMkC,cAAc,GAAG,IAAI,CAACC,mBAAmB,CAAC;UAAEvC,KAAK;UAAES;QAAW,CAAC,CAAC;QAEtE,IAAIK,OAAO,CAAC0B,aAAa,EAAE;UACzB1B,OAAO,CAAC0B,aAAa,CAAC;YAAE/B,UAAU;YAAE6B;UAAe,CAAC,CAAC;QACvD,CAAC,MAAM;UACLA,cAAc,CAAC,CAAC;QAClB;MACF,CAAC;MAAAzD,eAAA,8BAEqB,CAAC;QAAEmB;MAAkC,CAAC,KAAK;QAC/D,MAAM;UAAEE;QAAY,CAAC,GAAG,IAAI,CAACC,KAAK;QAClC,MAAMC,UAAU,GAAGF,WAAW,CAACF,KAAK,CAACrB,GAAG,CAAC;QACzC,MAAM;UAAE8B,UAAU;UAAEK;QAAQ,CAAC,GAAGV,UAAU;QAE1C,MAAMkC,cAAc,GAAG,IAAI,CAACC,mBAAmB,CAAC;UAAEvC,KAAK;UAAES;QAAW,CAAC,CAAC;QAEtE,IAAIK,OAAO,CAAC2B,iBAAiB,EAAE;UAC7B3B,OAAO,CAAC2B,iBAAiB,CAAC;YAAEhC,UAAU;YAAE6B;UAAe,CAAC,CAAC;QAC3D,CAAC,MAAM;UACLA,cAAc,CAAC,CAAC;QAClB;MACF,CAAC;MAAAzD,eAAA,6BAEqB+C,KAAa,IAAK;QACtC,IAAI,IAAI,CAACM,WAAW,EAAE;UACpB,IAAI,CAACA,WAAW,GAAG,KAAK;UACxB;QACF;QAEA,IAAI,CAACD,OAAO,CAAC,IAAI,CAAC9B,KAAK,CAACM,UAAU,CAACc,KAAK,CAACD,MAAM,CAACM,KAAK,CAAC,CAACV,SAAS,CAAC;MACnE,CAAC;MAAArC,eAAA,kBAEUqC,SAAiB,IAAK;QAC/B,MAAM;UAAET;QAAW,CAAC,GAAG,IAAI,CAACN,KAAK;QAEjCM,UAAU,CAACoB,QAAQ,CACjBa,8BAAa,CAACC,MAAM,CAAC;UACnBzB,SAAS;UACTvC,GAAG,EAAE8B,UAAU,CAACc,KAAK,CAAC5C;QACxB,CAAC,CACH,CAAC;MACH,CAAC;MAAAE,eAAA,sBAEsB,KAAK;IAAA;IAE5B+D,MAAMA,CAAA,EAAG;MACP,MAAM;QACJ1C,WAAW;QACXO,UAAU;QACVR,WAAW;QACX4C;MACF,CAAC,GAAG,IAAI,CAAC1C,KAAK;MACd,MAAM;QAAEoB;MAAM,CAAC,GAAGd,UAAU;MAC5B,MAAMT,KAAK,GAAGuB,KAAK,CAACD,MAAM,CAACC,KAAK,CAACK,KAAK,CAAC;MACvC,MAAMxB,UAAU,GAAGF,WAAW,CAACF,KAAK,CAACrB,GAAG,CAAC;MAEzC;QAAA;QACE;QACA;QACAhC,KAAA,CAAA4D,aAAA,CAACZ,OAAO,EAAAvB,QAAA,KACFyE,gBAAgB,EAChBzC,UAAU,CAACU,OAAO;UACtBgC,YAAY,EAAE,IAAI,CAACzB,aAAc;UACjC0B,qBAAqB,EAAE,IAAI,CAACC,sBAAuB;UACnDC,SAAS,EAAE,IAAI,CAACC,UAAW;UAC3BC,UAAU,EAAE,IAAI,CAACC,WAAY;UAC7BC,WAAW,EAAE,IAAI,CAACC,YAAa;UAC/BC,aAAa,EAAE,IAAI,CAACC,kBAAmB;UACvCC,UAAU,EAAE,IAAI,CAACC,eAAgB;UACjCC,cAAc,EAAE,IAAI,CAACC,mBAAoB;UACzCnD,UAAU,EAAEA,UAAW;UACvBP,WAAW,EAAEA,WAAY;UACzBD,WAAW,EAAEA;QAAY,EAC1B;MAAC;IAEN;EACF;EAEA,OAAO,CACLqB,MAA4B,EAC5BuC,MAKC,GAAG,CAAC,CAAC,KACH;IACH,MAAMC,MAAM,GAAG,IAAAC,0BAAS,EAACzC,MAAM,EAAEuC,MAAa,CAAC;IAE/C,OAAO,IAAAG,gCAAe,EAACpE,cAAc,EAASkE,MAAM,EAAED,MAAa,CAAC;EACtE,CAAC;AACH"}