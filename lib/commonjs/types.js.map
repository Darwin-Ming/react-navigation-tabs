{"version":3,"names":[],"sources":["types.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityRole,\n  AccessibilityState,\n  StyleProp,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport {\n  NavigationRoute,\n  NavigationState,\n  NavigationScreenProp,\n  NavigationParams,\n  NavigationDescriptor,\n  NavigationScreenConfig,\n  SupportedThemes,\n} from 'react-navigation';\n\nexport type NavigationTabState = NavigationState;\n\nexport type NavigationTabProp<\n  State = NavigationRoute,\n  Params = NavigationParams\n> = NavigationScreenProp<State, Params> & {\n  jumpTo(routeName: string, key?: string): void;\n};\n\nexport type ThemedColor =\n  | string\n  | {\n      light: string;\n      dark: string;\n    };\n\nexport type Orientation = 'horizontal' | 'vertical';\n\nexport type LabelPosition = 'beside-icon' | 'below-icon';\n\ninterface BaseAnimation {\n  useNativeDriver?: boolean;\n}\ninterface TimingAnimation extends BaseAnimation {\n  easing?: (value: number) => number;\n  duration?: number;\n  delay?: number;\n}\ninterface SpringAnimation extends BaseAnimation {\n  overshootClamping?: boolean;\n  restDisplacementThreshold?: number;\n  restSpeedThreshold?: number;\n  velocity?: number | { x: number; y: number };\n  bounciness?: number;\n  speed?: number;\n  tension?: number;\n  friction?: number;\n  stiffness?: number;\n  mass?: number;\n  damping?: number;\n  delay?: number;\n}\nexport type TimingKeyboardAnimationConfig = {\n  animation: 'timing';\n  config?: TimingAnimation;\n};\nexport type SpringKeyboardAnimationConfig = {\n  animation: 'spring';\n  config?: SpringAnimation;\n};\nexport type KeyboardAnimationConfig =\n  | TimingKeyboardAnimationConfig\n  | SpringKeyboardAnimationConfig;\nexport type KeyboardHidesTabBarAnimationConfig = {\n  show: KeyboardAnimationConfig;\n  hide: KeyboardAnimationConfig;\n};\n\nexport type BottomTabBarOptions = {\n  keyboardHidesTabBar?: boolean;\n  keyboardHidesTabBarAnimationConfig?: Partial<\n    KeyboardHidesTabBarAnimationConfig\n  >;\n  activeTintColor?: ThemedColor;\n  inactiveTintColor?: ThemedColor;\n  activeBackgroundColor?: ThemedColor;\n  inactiveBackgroundColor?: ThemedColor;\n  allowFontScaling?: boolean;\n  showLabel?: boolean;\n  showIcon?: boolean;\n  labelStyle?: StyleProp<TextStyle>;\n  tabStyle?: StyleProp<ViewStyle>;\n  labelPosition?:\n    | LabelPosition\n    | ((options: { deviceOrientation: Orientation }) => LabelPosition);\n  adaptive?: boolean;\n  safeAreaInset?: {\n    top?: 'always' | 'never' | number;\n    right?: 'always' | 'never' | number;\n    bottom?: 'always' | 'never' | number;\n    left?: 'always' | 'never' | number;\n  };\n  style?: StyleProp<ViewStyle>;\n};\n\nexport type ButtonComponentProps = {\n  route: NavigationRoute;\n  focused: boolean;\n  onPress: () => void;\n  onLongPress: () => void;\n  testID?: string;\n  accessibilityLabel?: string;\n  accessibilityRole?: AccessibilityRole;\n  accessibilityState?: AccessibilityState;\n  accessibilityStates?: string[];\n  style?: StyleProp<ViewStyle>;\n};\n\nexport type BottomTabBarProps = BottomTabBarOptions & {\n  navigation: NavigationTabProp;\n  onTabPress: (props: { route: NavigationRoute }) => void;\n  onTabLongPress: (props: { route: NavigationRoute }) => void;\n  getAccessibilityLabel: (props: {\n    route: NavigationRoute;\n  }) => string | undefined;\n  getAccessibilityRole: (props: {\n    route: NavigationRoute;\n  }) => AccessibilityRole | undefined;\n  getAccessibilityStates: (props: {\n    route: NavigationRoute;\n    focused: boolean;\n  }) => string[];\n  getButtonComponent: (props: {\n    route: NavigationRoute;\n  }) => React.ComponentType<ButtonComponentProps> | undefined;\n  getLabelText: (props: {\n    route: NavigationRoute;\n  }) =>\n    | ((scene: {\n        focused: boolean;\n        tintColor?: string;\n        orientation?: 'horizontal' | 'vertical';\n      }) => string | undefined)\n    | string\n    | undefined;\n  getTestID: (props: { route: NavigationRoute }) => string | undefined;\n  renderIcon: (props: {\n    route: NavigationRoute;\n    focused: boolean;\n    tintColor?: string;\n    horizontal?: boolean;\n  }) => React.ReactNode;\n  dimensions: { width: number; height: number };\n  isLandscape: boolean;\n  jumpTo: (key: string) => void;\n  screenProps: unknown;\n  detachInactiveScreens?: boolean;\n};\n\nexport type MaterialTabBarOptions = {\n  activeTintColor?: string;\n  allowFontScaling?: boolean;\n  bounces?: boolean;\n  inactiveTintColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  scrollEnabled?: boolean;\n  showIcon?: boolean;\n  showLabel?: boolean;\n  upperCaseLabel?: boolean;\n  tabStyle?: StyleProp<ViewStyle>;\n  indicatorStyle?: StyleProp<ViewStyle>;\n  iconStyle?: StyleProp<ViewStyle>;\n  labelStyle?: StyleProp<TextStyle>;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport type MaterialTabBarProps = MaterialTabBarOptions & {\n  layout: {\n    width: number;\n    height: number;\n  };\n  position: Animated.Node<number>;\n  jumpTo: (key: string) => void;\n  getLabelText: (scene: {\n    route: NavigationRoute;\n  }) =>\n    | ((scene: { focused: boolean; tintColor: string }) => string | undefined)\n    | string\n    | undefined;\n  getAccessible?: (scene: { route: NavigationRoute }) => boolean | undefined;\n  getAccessibilityLabel: (scene: {\n    route: NavigationRoute;\n  }) => string | undefined;\n  getTestID: (scene: { route: NavigationRoute }) => string | undefined;\n  renderIcon: (scene: {\n    route: NavigationRoute;\n    focused: boolean;\n    tintColor: string;\n    horizontal?: boolean;\n  }) => React.ReactNode;\n  renderBadge?: (scene: { route: NavigationRoute }) => React.ReactNode;\n  onTabPress?: (scene: { route: NavigationRoute }) => void;\n  onTabLongPress?: (scene: { route: NavigationRoute }) => void;\n  tabBarPosition?: 'top' | 'bottom';\n  screenProps: unknown;\n  navigation: NavigationTabProp;\n};\n\nexport type NavigationCommonTabOptions = {\n  title?: string;\n  tabBarLabel?: React.ReactNode;\n  tabBarVisible?: boolean;\n  tabBarAccessibilityLabel?: string;\n  tabBarTestID?: string;\n  tabBarIcon?:\n    | React.ReactNode\n    | ((props: {\n        focused: boolean;\n        tintColor?: string;\n        horizontal?: boolean;\n      }) => React.ReactNode);\n  tabBarOnPress?: (props: {\n    navigation: NavigationTabProp;\n    defaultHandler: () => void;\n  }) => void;\n  tabBarOnLongPress?: (props: {\n    navigation: NavigationTabProp;\n    defaultHandler: () => void;\n  }) => void;\n};\n\nexport type NavigationBottomTabOptions = NavigationCommonTabOptions & {\n  tabBarButtonComponent?: React.ComponentType<ButtonComponentProps>;\n};\n\nexport type NavigationMaterialTabOptions = NavigationCommonTabOptions & {\n  tabBarButtonComponent?: React.ComponentType<any>;\n  swipeEnabled?: boolean | ((state: NavigationState) => boolean);\n};\n\nexport type NavigationTabScreenProps<\n  Params = NavigationParams,\n  ScreenProps = unknown\n> = {\n  theme: SupportedThemes;\n  navigation: NavigationTabProp<NavigationRoute, Params>;\n  screenProps: ScreenProps;\n};\n\nexport type NavigationMaterialTabScreenComponent<\n  Params = NavigationParams,\n  ScreenProps = unknown\n> = React.ComponentType<NavigationTabScreenProps<Params, ScreenProps>> & {\n  navigationOptions?: NavigationScreenConfig<\n    NavigationMaterialTabOptions,\n    NavigationTabProp<NavigationRoute, Params>,\n    ScreenProps\n  >;\n};\n\nexport type NavigationBottomTabScreenComponent<\n  Params = NavigationParams,\n  ScreenProps = unknown\n> = React.ComponentType<NavigationTabScreenProps<Params, ScreenProps>> & {\n  navigationOptions?: NavigationScreenConfig<\n    NavigationBottomTabOptions,\n    NavigationTabProp<NavigationRoute, Params>,\n    ScreenProps\n  >;\n};\n\nexport type SceneDescriptorMap = {\n  [key: string]: NavigationDescriptor<\n    NavigationParams,\n    NavigationBottomTabOptions | NavigationMaterialTabOptions,\n    NavigationTabProp\n  >;\n};\n"],"mappings":""}